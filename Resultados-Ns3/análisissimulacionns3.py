# -*- coding: utf-8 -*-
"""AnálisisSimulacionNs3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12GSV9-hVu4z82PqimSbzWwQsaGry9ILN
"""

import pandas as pd
import matplotlib.pyplot as plt
import re
import numpy as np

# Cargar el archivo como UTF-16 sin delimitador
df = pd.read_csv('/content/output3.csv', encoding='utf-16', header=None)

# Mostrar las primeras filas del DataFrame
print(df.head())

# Ver la estructura del DataFrame
print(df.info())

# Separar la única columna en dos partes: Timestamp y Data
df[['Timestamp', 'Data']] = df[0].str.extract(r'(\+ \d+\.\d+|\d+) (.*)')

# Mostrar las primeras filas del nuevo DataFrame
print(df[['Timestamp', 'Data']].head())

# Limpiar el Timestamp
df['Timestamp'] = df['Timestamp'].str.replace('+', '').astype(float)

# Mostrar las primeras filas para verificar la limpieza
print(df[['Timestamp', 'Data']].head())

# Función para extraer información
def extract_info(row):
    # Regex para capturar las direcciones IP
    ip_pattern = r'(\d+\.\d+\.\d+\.\d+)'
    port_pattern = r'(\d+)'

    ips = re.findall(ip_pattern, row['Data'])
    ports = re.findall(port_pattern, row['Data'])

    # Obtener el tipo de paquete (por ejemplo, SYN, ACK)
    packet_type = re.search(r'\[(.*?)\]', row['Data'])
    packet_type = packet_type.group(1) if packet_type else None

    return pd.Series([ips, ports, packet_type])

# Aplicar la función a cada fila
df[['IPs', 'Ports', 'PacketType']] = df.apply(extract_info, axis=1)

# Mostrar el DataFrame con la nueva información
print(df[['Timestamp', 'IPs', 'Ports', 'PacketType']].head())

# Extraer puertos de interés (por ejemplo, puertos de origen y destino)
df['SourcePorts'] = df['Ports'].apply(lambda x: x[0:len(x)//2])  # Asumiendo que la primera mitad son puertos de origen
df['DestPorts'] = df['Ports'].apply(lambda x: x[len(x)//2:])  # Y la segunda mitad son puertos de destino

# Mostrar el DataFrame con la nueva información
print(df[['Timestamp', 'IPs', 'SourcePorts', 'DestPorts', 'PacketType']].head())

# Contar la cantidad de paquetes por timestamp
traffic_per_second = df['Timestamp'].value_counts().sort_index()

# Visualizar el tráfico
traffic_per_second.plot(kind='line', title='Tráfico por Segundo')
plt.xlabel('Timestamp')
plt.ylabel('Cantidad de Paquetes')
plt.xticks(rotation=45)
plt.show()

# Contar la cantidad de cada tipo de paquete
packet_counts = df['PacketType'].value_counts()

# Visualizar los conteos
import matplotlib.pyplot as plt

packet_counts.plot(kind='bar', title='Conteo de Tipos de Paquetes')
plt.xlabel('Tipo de Paquete')
plt.ylabel('Cantidad')
plt.xticks(rotation=45)
plt.show()

# Filtrar por una dirección IP específica (por ejemplo, 10.1.1.1)
specific_ip_traffic = df[df['IPs'].apply(lambda x: '10.1.1.1' in x)]

# Mostrar el tráfico de la IP específica
print(specific_ip_traffic)

ip_counts = df['IPs'].explode().value_counts()
print(ip_counts)

# Contar puertos de origen
source_ports_counts = df['SourcePorts'].explode().value_counts()
print(source_ports_counts)

# Contar puertos de destino
dest_ports_counts = df['DestPorts'].explode().value_counts()
print(dest_ports_counts)

# Graficar el conteo de paquetes por IP
ip_counts.plot(kind='bar', title='Conteo de Paquetes por IP')
plt.xlabel('IP')
plt.ylabel('Cantidad de Paquetes')
plt.xticks(rotation=45)
plt.show()

syn_packets = df[df['PacketType'] == 'SYN']
print(syn_packets)

# Agrupar por intervalos de tiempo (ej. cada 0.1 segundos)
traffic_per_interval = df.groupby(pd.cut(df['Timestamp'].astype(float), bins=np.arange(0, df['Timestamp'].astype(float).max(), 0.1))).size()

# Visualizar el tráfico por intervalo
traffic_per_interval.plot(kind='line', title='Tráfico por Intervalo de Tiempo')
plt.xlabel('Intervalo de Tiempo')
plt.ylabel('Cantidad de Paquetes')
plt.show()

# Agrupar los datos por intervalos de tiempo
traffic_per_interval = df.groupby(pd.cut(df['Timestamp'].astype(float),
                                           bins=np.arange(0, df['Timestamp'].astype(float).max(), 0.1),
                                           include_lowest=True)).size()

# Visualizar el tráfico
traffic_per_interval.plot(kind='line', title='Tráfico por Intervalo')
plt.xlabel('Intervalo de Tiempo')
plt.ylabel('Cantidad de Paquetes')
plt.xticks(rotation=45)
plt.show()

import matplotlib.pyplot as plt

traffic_per_second = df.groupby('Timestamp').size()
traffic_per_second.plot(kind='line', title='Tráfico por Segundo')
plt.xlabel('Timestamp')
plt.ylabel('Cantidad de Paquetes')
plt.xticks(rotation=45)
plt.show()

ip_activity = df['IPs'].value_counts().head(10)
print(ip_activity)

from collections import Counter

ip_pairs = Counter(tuple(sorted(pair)) for pair in df['IPs'])
print(ip_pairs.most_common(10))

port_usage = df['Ports'].explode().value_counts().head(10)
print(port_usage)

port_usage.plot(kind='bar', title='Puertos Más Utilizados')
plt.xlabel('Puerto')
plt.ylabel('Frecuencia')
plt.show()

traffic_per_interval = df.groupby(pd.cut(df['Timestamp'].astype(float), bins=np.arange(0, df['Timestamp'].astype(float).max(), 0.1))).size()
traffic_per_interval.plot(kind='bar', title='Tráfico por Intervalo')
plt.xlabel('Intervalo de Tiempo')
plt.ylabel('Cantidad de Paquetes')
plt.show()

df.describe()